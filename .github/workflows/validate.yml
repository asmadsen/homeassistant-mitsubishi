name: Validate

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

jobs:
  validate-hassfest:
    name: Validate with hassfest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Hassfest validation
        uses: home-assistant/actions/hassfest@master

  validate-hacs:
    name: Validate with HACS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration

  validate-manifest:
    name: Validate manifest.json
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Validate manifest structure
        run: |
          python -c "
          import json
          import sys
          from pathlib import Path

          manifest_path = Path('custom_components/mitsubishi/manifest.json')

          try:
              with open(manifest_path) as f:
                  manifest = json.load(f)

              # Required fields for Home Assistant integrations
              required_fields = [
                  'domain', 'name', 'documentation', 'codeowners',
                  'requirements', 'version', 'iot_class', 'config_flow'
              ]

              missing = [field for field in required_fields if field not in manifest]

              if missing:
                  print(f'❌ Missing required fields: {missing}')
                  sys.exit(1)

              # Validate version format (x.y.z)
              import re
              version = manifest.get('version', '')
              if not re.match(r'^\d+\.\d+\.\d+$', version):
                  print(f'❌ Invalid version format: {version}')
                  print('   Version should be in format: x.y.z')
                  sys.exit(1)

              # Validate requirements format
              requirements = manifest.get('requirements', [])
              for req in requirements:
                  if not isinstance(req, str):
                      print(f'❌ Invalid requirement format: {req}')
                      sys.exit(1)

              print('✅ Manifest validation passed')
              print(f'   Domain: {manifest.get(\"domain\")}')
              print(f'   Version: {manifest.get(\"version\")}')
              print(f'   Requirements: {manifest.get(\"requirements\")}')
              print(f'   Config flow: {manifest.get(\"config_flow\")}')

          except json.JSONDecodeError as e:
              print(f'❌ Invalid JSON in manifest: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'❌ Manifest validation failed: {e}')
              sys.exit(1)
          "
